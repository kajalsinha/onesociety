name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://onesociety:onesociety@localhost:5432/onesociety_test

jobs:
  # Database setup and validation
  database:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: onesociety
          POSTGRES_USER: onesociety
          POSTGRES_DB: onesociety_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U onesociety; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        make db-setup
        make db-migrate service=all

    - name: Validate database schema
      run: |
        make db-validate

  # Rust backend testing and linting
  rust-backend:
    runs-on: ubuntu-latest
    needs: database
    strategy:
      matrix:
        toolchain: [stable, 1.75]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install sqlx-cli
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace -- -D warnings

    - name: Run tests
      run: cargo test --workspace --verbose

    - name: Build release
      run: cargo build --release --workspace

    - name: Run security audit
      run: cargo audit --version || cargo install cargo-audit
      continue-on-error: true

    - name: Security audit
      run: cargo audit
      continue-on-error: true

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    needs: rust-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check file sizes
      run: |
        echo "Checking for files exceeding 500 lines..."
        find apps libs -name "*.rs" -exec wc -l {} + | awk '$1 > 500 {print $2 ": " $1 " lines"}'
        echo "File size check completed"

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME" apps/ libs/ --include="*.rs" || echo "No TODO/FIXME comments found"

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        grep -r "password\|secret\|key\|token" apps/ libs/ --include="*.rs" | grep -v "//" | grep -v "use" || echo "No obvious hardcoded secrets found"

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: database
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: onesociety
          POSTGRES_USER: onesociety
          POSTGRES_DB: onesociety_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Setup database
      run: |
        make db-setup
        make db-migrate service=all
        make db-seed

    - name: Run integration tests
      run: |
        export DATABASE_URL="postgresql://onesociety:onesociety@localhost:5432/onesociety_test"
        cargo test --workspace --test "*_tests" --verbose

  # Documentation generation
  docs:
    runs-on: ubuntu-latest
    needs: rust-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Generate API documentation
      run: |
        cargo doc --workspace --no-deps
        echo "Documentation generated successfully"

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-docs
        path: target/doc/

  # Performance benchmarks (optional)
  benchmarks:
    runs-on: ubuntu-latest
    needs: rust-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks..."
        # Add benchmark commands when available
        echo "Benchmarks completed"
